#!/usr/bin/env python

import os
import sys
import subprocess
import fileinput
import glob
from semver import version_newer_than
from quality_docker import tag_to_version, ensure_passes, create_new_tag
from github import ensure_main_branch_and_clean_checkout, force_create_branch


def upgrade_and_rebaseline(new_tag, tracking_filename):
    with open(tracking_filename, 'w+') as tracking_file:
        tracking_file.write(new_tag + "\n")
    print("Overwrote " + tracking_filename + " with tag " + new_tag)


def line_matches_any(line, lines_matching):
    for line_matching in lines_matching:
        if line_matching in line:
            return True
    return False


def remove_lines_in_file(filename, lines_matching):
    if os.path.isfile(filename):
        for line in fileinput.input(filename,
                                    inplace=True,
                                    backup='.bak'):
            if not line_matches_any(line, lines_matching):
                print(line)  # this goes to the current file


def reset_metrics():
    files = glob.glob('metrics/*_high_water_mark')
    for filename in files:
        os.remove(filename)


def add_commit_and_push(tracking_filename):
    cmd = "git add " + \
          tracking_filename + " " + \
          "metrics/*_high_water_mark"

    if os.path.isfile('Rakefile.quality'):
        cmd += " Rakefile.quality"

    subprocess.check_output(cmd, shell=True)

    subprocess.check_output(["git",
                             "commit",
                             "-m",
                             "Upgrade quality gem and rebaseline"])

    # Overwrite any previous attempt on this branch
    subprocess.check_output(["git", "push", "-f"])

    subprocess.call(["hub",
                     "pull-request",
                     "-m",
                     "Automated quality gem upgrade"])


def pull_old_tag(tracking_filename, default_version):
    if os.path.isfile(tracking_filename):
        with open(tracking_filename) as tracking_file:
            return tracking_file.read().rstrip("\r\n")
    else:
        return default_version


def upgrade_quality_gem(new_version, tracking_filename):
    old_tag = pull_old_tag(tracking_filename, None)

    if old_tag is None:
        # must not use quality gem docker image yet
        print("No quality docker tag defined, so assuming " +
              "this doesn't use quality gem docker iamge")
        return 0

    print("old_tag is " + old_tag)

    old_version = tag_to_version(old_tag)

    ensure_main_branch_and_clean_checkout()

    print("old_version is " + old_version)

    if (not version_newer_than(new_version, old_version)):
        print("Already at " + new_version + " (" + old_version + ")")
        return 0

    print("")
    print("Trying with old tag (" + old_tag + ")")
    print("")

    ensure_passes(old_tag)

    force_create_branch()

    new_tag = create_new_tag(old_tag, new_version)

    upgrade_and_rebaseline(new_tag, tracking_filename)

    reset_metrics()

    print("")
    print("Trying with new tag (" + new_tag + ")")
    print("")

    remove_lines_in_file('Rakefile.quality',
                         ['source_dirs', 'source_file_globber'])

    ensure_passes(new_tag)

    add_commit_and_push(tracking_filename)

    # create_pull_request()


if __name__ == "__main__":
    new_version = sys.argv[1]
    tracking_filename = sys.argv[2]
    exit(upgrade_quality_gem(new_version, tracking_filename))
